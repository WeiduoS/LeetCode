{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Preface"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Algorithm/Dynamic Programming/Backpack/backpack01/","text":"1. Backpack Description Given n items with size vi (1 = i = n), an integer W denotes the size of a backpack. How full you can fill this backpack to maximize the total value? Example If we have 4 items with size [2, 3, 5, 7], the backpack size is 11, we can select [2, 3, 5], so that the max size we can fill this backpack is 10. If the backpack size is 12. we can select [2, 3, 7] so that we can fulfill the backpack. Analysis Weight Limit(i) 0 1 2 3 4 5 6 7 8 9 10 11 w1 = 1 v1 = 1 0 1 1 1 1 1 1 1 1 1 1 1 w2 = 2 v2 = 6 0 1 6 7 7 7 7 7 7 7 7 7 w3 = 5 v3 = 18 0 1 6 7 7 18 19 24 25 25 25 25 w4 = 6 v3 = 22 0 1 6 7 7 18 22 24 28 29 29 40 w5 = 7 v5 = 28 0 1 6 7 7 18 22 28 29 34 35 40 Transform Function dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - A[i - 1]] + A[i - 1]) Template public int backpack ( int w , int [] wt , int [] val ) { int n = wt . length ; int [][] dp = new int [ n + 1 ][ w + 1 ]; for ( int i = 1 ; i = n ; i ++) { for ( int j = 1 ; j = w ; j ++) { if ( j = wt [ i - 1 ]) { dp [ i ][ j ] = Math . max ( dp [ i - 1 ][ j ], dp [ i ][ j - wt [ i - 1 ]] + val [ i - 1 ]); } else { dp [ i ][ j ] = dp [ i - 1 ][ j ]; } } } return dp [ n ][ w ]; }","title":"1. Backpack"},{"location":"Algorithm/Dynamic Programming/Backpack/backpack01/#1-backpack","text":"","title":"1. Backpack"},{"location":"Algorithm/Dynamic Programming/Backpack/backpack01/#description","text":"Given n items with size vi (1 = i = n), an integer W denotes the size of a backpack. How full you can fill this backpack to maximize the total value?","title":"Description"},{"location":"Algorithm/Dynamic Programming/Backpack/backpack01/#example","text":"If we have 4 items with size [2, 3, 5, 7], the backpack size is 11, we can select [2, 3, 5], so that the max size we can fill this backpack is 10. If the backpack size is 12. we can select [2, 3, 7] so that we can fulfill the backpack.","title":"Example"},{"location":"Algorithm/Dynamic Programming/Backpack/backpack01/#analysis","text":"Weight Limit(i) 0 1 2 3 4 5 6 7 8 9 10 11 w1 = 1 v1 = 1 0 1 1 1 1 1 1 1 1 1 1 1 w2 = 2 v2 = 6 0 1 6 7 7 7 7 7 7 7 7 7 w3 = 5 v3 = 18 0 1 6 7 7 18 19 24 25 25 25 25 w4 = 6 v3 = 22 0 1 6 7 7 18 22 24 28 29 29 40 w5 = 7 v5 = 28 0 1 6 7 7 18 22 28 29 34 35 40","title":"Analysis"},{"location":"Algorithm/Dynamic Programming/Backpack/backpack01/#transform-function","text":"dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - A[i - 1]] + A[i - 1])","title":"Transform Function"},{"location":"Algorithm/Dynamic Programming/Backpack/backpack01/#template","text":"public int backpack ( int w , int [] wt , int [] val ) { int n = wt . length ; int [][] dp = new int [ n + 1 ][ w + 1 ]; for ( int i = 1 ; i = n ; i ++) { for ( int j = 1 ; j = w ; j ++) { if ( j = wt [ i - 1 ]) { dp [ i ][ j ] = Math . max ( dp [ i - 1 ][ j ], dp [ i ][ j - wt [ i - 1 ]] + val [ i - 1 ]); } else { dp [ i ][ j ] = dp [ i - 1 ][ j ]; } } } return dp [ n ][ w ]; }","title":"Template"}]}